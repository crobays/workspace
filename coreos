#!/bin/bash
usage()
{
cat << EOF

usage: $(basename $0) options INSTANCE

This script handles your CoreOS instances with Vagrant (vagrantup.com)

OPTIONS:
	-h (help)           Show this message
	-c (command)        -c=command Pass a command to the coreos instance
	-r (reload)         Reload the instance
	-R (rebuild)        Rebuild the instance
	-p (provision)      Provision the instance
	-d (destroy)        Kill and destroy instance
	-s (status)         See Vagrants global status

EOF
}

count=0
while getopts "hc:rRpds" OPTION
do
	case $OPTION in
		h|help)
			usage
			exit 1
			;;
		c|command)
			COMMAND="$OPTARG"
			;;
		r|reload)
			RELOAD=1
			;;
		R|rebuild)
			REBUILD=1
			;;
		p|provision)
			PROVISION=1
			;;
		d|destroy)
			DESTROY=1
			;;
		s|status)
			STATUS=1
			;;
		?)
			usage
			exit
		;;
	esac
	count=`expr $count + 1`
	if [ "$OPTARG" ]
	then
		count=`expr $count + 1`
	fi
done
shift $count

black="\e[0;30m"
red="\e[0;31m"
green="\e[0;32m"
orange="\e[0;33m"
blue="\e[0;34m"
purple="\e[0;35m"
turquase="\e[0;36m"
NC="\e[0m"

function info ()
{
	printf "$turquase"
	echo "$1"
	printf "$NC"
}

function success ()
{
	printf "$green"
	echo "$1"
	printf "$NC"
}

function warning ()
{
    printf "$orange"
    echo "$1"
    printf "$NC"
}

function error ()
{
	printf "$red"
	echo "$1"
	printf "$NC"
}

INSTANCE="$1"

if [ "$(which vagrant)" == "" ]
then
	error "Vagrant could not be found."
	exit
fi

env="$(cat "$WORKSPACE/env.json")"
function get_env()
{
    echo $env | sed -e 's/[{}]/''/g' | awk -F=':' -v RS=',' "\$1~/\"$1\"/ {print}" | sed -e "s/\"$1\"://" | tr -d "\n\t\" "
}

provider="$(get_env 'provider')"
export VAGRANT_DEFAULT_PROVIDER="${provider//-/_}"

if [ "$provider" == "vmware-fusion" ] && [ ! -f "$HOME/${VAGRANT_HOME:-.vagrant.d}/license-vagrant-vmware-fusion.lic" ]
then
	if [ ! -f "$WORKSPACE/config/"*.lic ]
	then
		warning "Please copy your Vagrant VMWare Fusion License to ${WORKSPACE/$HOME/~}/config/"
		exit
	fi
	vagrant plugin install vagrant-vmware-fusion
	vagrant plugin license vagrant-vmware-fusion "$(ls "$WORKSPACE/config/"*.lic | head -1)"

	if [ -d "$HOME/Applications/VMWare Fusion.app" ]
	then
		vmware_app="$HOME/Applications/VMWare Fusion.app"
	elif [ -d "/Applications/VMWare Fusion.app" ]
	then
		vmware_app="/Applications/VMWare Fusion.app"
	else
		error "There was no VMWare Fusion.app found on your system"
		error "Install VirtualBox or VMWare Fusion first"
		exit
	fi
	
	open "$vmware_app"
	success "Please run 'workspace' again if the VMWare Fusion is activated"
	exit
elif [ "$provider" == "virtualbox" ] && [ -f "$WORKSPACE/.system/"*.vbox-extpack ]
then
	if [ ! -f "$WORKSPACE/.system/extpack-installed" ]
	then
		open "$WORKSPACE/.system/"*.vbox-extpack
		echo "Please run 'workspace' again if the Extension Pack has been installed"
		touch "$WORKSPACE/.system/extpack-installed"
		exit
	else
		rm -f "$WORKSPACE/.system/"*.vbox-extpack
		rm -f "$WORKSPACE/.system/extpack-installed"
	fi
fi

if [ $STATUS ]
then
	vagrant global-status
	exit
fi

if [ ! "$INSTANCE" ]
then
	INSTANCE=1
fi

INSTANCE="$(printf "%0*d\n" 2 ${INSTANCE:-1})"

if [ $REBUILD ] || [ $DESTROY ]
then
	success "Destroying coreos-$INSTANCE..."
	vagrant destroy -f "coreos-$INSTANCE" 2>/dev/null
	if [ $DESTROY ]
	then
		vagrant global-status
		exit
	fi
fi

info "Looking for status coreos-$INSTANCE..."
status="$(vagrant status coreos-$INSTANCE 2>/dev/null)"
if [ "${status/not running/}" != "$status" ]
then
	success "Resuming coreos-$INSTANCE..."
	vagrant up "coreos-$INSTANCE"
elif [ "${status/not created/}" != "$status" ]
then
	success "Creating coreos-$INSTANCE..."
	vagrant up "coreos-$INSTANCE"
else
	if [ "$INSTANCE" == "01" ] && [ "$(vagrant ssh --command "ls -A /workspace" "coreos-$INSTANCE")" == "" ]
	then
		RELOAD=1
	fi
	if [ $RELOAD ]
	then
		info "Reloading coreos-$INSTANCE"
		if [ $PROVISION ]
		then
			vagrant reload "coreos-$INSTANCE"
		else
			vagrant reload --provision "coreos-$INSTANCE"
		fi
	else
		info "Already running coreos-$INSTANCE"
		if [ $PROVISION ]
		then
			success "Provisioning coreos-$INSTANCE..."
			vagrant provision "coreos-$INSTANCE"
		fi
	fi
fi

status="$(vagrant status coreos-$INSTANCE 2>/dev/null)"
if [ "${status/not running/}" == "$status" ]
then
	if [ "$COMMAND" != "" ]
	then
		info "Running your command on coreos-$INSTANCE..."
		vagrant ssh --command "$COMMAND" "coreos-$INSTANCE"
	else
		info "Logging in to coreos-$INSTANCE..."
		vagrant ssh "coreos-$INSTANCE"
	fi
fi

