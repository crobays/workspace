#!/bin/bash
usage()
{
cat << EOF

usage: $(basename $0) options WORKSPACE-NUM

This script handles your Workspace instances with Docker (docker.com)

OPTIONS:
    -h (help)           Show this message
    -r (recreate)       Recreate workspace
    -R (rebuild)        Rebuild workspace image from Dockerfile and create workspace container
    -B (rebuild base)   Rebuild base image from ./base/Dockerfile (get yourself a cup of coffee)
    -d (destroy)        Kill and destroy workspace container

EOF
}
BASE_NAME="workspace"
count=0
while getopts “hrRBd” OPTION
do
         case $OPTION in
                 h)
                         usage
                         exit 1
                         ;;
                 r)
                         RERUN_CONTAINER=1
                         ;;
                 R)
                         REBUILD_IMAGE=1
                         ;;
                 B)
                         REBUILD_BASE_IMAGE=1
                         ;;
                 d)
                         DESTROY=1
                         ;;
                 ?)
                         usage
                         exit
                         ;;
         esac
        count=`expr $count + 1`
        if [ "$OPTARG" ]
        then
            count=`expr $count + 1`
        fi
done
shift $count

black="\e[0;30m"
red="\e[0;31m"
green="\e[0;32m"
orange="\e[0;33m"
blue="\e[0;34m"
purple="\e[0;35m"
turquase="\e[0;36m"
NC="\e[0m"

function info ()
{
    printf "$turquase"
    echo "$1"
    printf "$NC"
}

function success ()
{
    printf "$green"
    echo "$1"
    printf "$NC"
}

function warning ()
{
    printf "$orange"
    echo "$1"
    printf "$NC"
}

function error ()
{
    printf "$red"
    echo "$1"
    printf "$NC"
}

env="$(cat '/workspace/env.json')"
function get_env()
{
    echo $env | sed -e 's/[{}]/''/g' | awk -F=':' -v RS=',' "\$1~/\"$1\"/ {print}" | sed -e "s/\"$1\"://" | tr -d "\n\t\" "
}

image="$(get_env 'username')/workspace"
workspace_base_dir="/workspace/base"
workspace_base_image="crobays/workspace-base"
workspace_base_image_file="/workspace/.docker-images/crobays-SLASH-workspace-base-COLON-latest.tar"

if [ "$(cat /workspace/config/git.json)" == "$(cat /workspace/.config-boilerplate/git.json)" ]
then
    warning "First set your Git credentials in ./config/git.json"
    exit
fi

NAME_SUFFIX="$1"
if [ ! "$NAME_SUFFIX" ]
then
    NAME_SUFFIX=1
    con="$(docker inspect "$BASE_NAME-$(printf "%0*d\n" 2 ${NAME_SUFFIX:-1})" 2>/dev/null)"
    while [ "${con/\"Running\": true,/}" != "$con" ];do
        NAME_SUFFIX=`expr $NAME_SUFFIX + 1`
        con="$(docker inspect "$BASE_NAME-$(printf "%0*d\n" 2 ${NAME_SUFFIX:-1})" 2>/dev/null)"
    done
fi

NAME_SUFFIX="$(printf "%0*d\n" 2 ${NAME_SUFFIX:-1})"

NAME="$BASE_NAME-$NAME_SUFFIX"

if [ $REBUILD_BASE_IMAGE ]
then
    if [ -f "$workspace_base_image_file" ]
    then
        rm -f "$workspace_base_image_file"
    fi

    if [ "$(docker inspect $workspace_base_image 2>/dev/null)" != "[]" ]
    then
        docker rmi --force $workspace_base_image
    fi
    REBUILD_IMAGE=1
fi

if [ $DESTROY ]
then
    docker rm -f "$NAME" 2>/dev/null
    exit
fi

if [ $RERUN_CONTAINER ] || [ $REBUILD_IMAGE ]
then
    docker rm -f "$NAME" 2>/dev/null
    if [ $REBUILD_IMAGE ]
    then
        if [ -f "$tar" ]
        then
            rm -f "$tar"
        fi
        if [ "$(docker inspect "$image" 2>/dev/null)" != "[]" ]
        then
            docker rmi --force "$image"
        fi
    fi
fi

container="$(docker inspect "$NAME" 2>/dev/null)"

if [ "$container" != "[]" ]
then
    docker start \
        --attach \
        --interactive \
        "$NAME"
else
    if [ "$(docker inspect $workspace_base_image 2>/dev/null)" == "[]" ] && [ -f "$workspace_base_image_file" ]
    then
        docker load --input "$workspace_base_image_file"
    fi
    
    if [ "$(docker inspect $workspace_base_image 2>/dev/null)" == "[]" ]
    then
        docker build --tag $workspace_base_image "$workspace_base_dir"
        if [ "$(docker inspect $workspace_base_image 2>/dev/null)" != "[]" ]
        then
            if [ -f "$workspace_base_image_file" ]
            then
                rm -f "$workspace_base_image_file"
            fi
            docker save --output "$workspace_base_image_file" $workspace_base_image
        else
            error "Sorry to say... but building $workspace_base_image failed"
            exit
        fi
    fi

    if [ $REBUILD_IMAGE ] || [ "$(docker inspect "$image" 2>/dev/null)" == "[]" ]
    then
        docker build \
            --tag "$image:latest" \
            "/workspace"
    fi
    
    if [ "$(docker inspect "$image" 2>/dev/null)" == "[]" ]
    then
        error "Sorry to say... but building $image failed"
        exit
    fi

    docker run \
        --name "$NAME" \
        --hostname "$HOSTNAME-$NAME" \
        --volume "/workspace:/workspace" \
        --volume "/var/run/docker.sock:/var/run/docker.sock" \
        --env "CONFIG_DIR=/workspace/config" \
        --env "LOG_LEVEL=1" \
        --interactive \
        --tty \
        "$image"
#        --env "SCRIPTS=/workspace/docker/crobays/workspace/scripts" \
fi

