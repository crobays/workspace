#!/bin/bash
usage()
{
cat << EOF

usage: $(basename $0) options WORKSPACE-NUM

This script handles your Workspace instances with Docker (docker.com)

OPTIONS:
    -h (help)           Show this message
    -t (tag)            The base version of the base (default to \'latest\')
    -r (recreate)       Recreate workspace
    -b (build)          Build workspace image from Dockerfile with new tag
    -C (cache)          Use cache when building base image
    -d (destroy)        Kill and destroy workspace container
    -l (log level)      Log level 1: Actions 2: with execs and curls
    -c (command)        Run a command

EOF
}
BASE_NAME="workspace"
LOG_LEVEL="0"
count=0
while getopts “ht:rbCdl:c:” OPTION
do
         case $OPTION in
            h)
                usage
                exit 1
                ;;
            t)
                IMAGE_TAG="$OPTARG"
                ;;
            r)
                RERUN_CONTAINER=1
                ;;
            b)
                BUILD_IMAGE=1
                ;;
            C)
                USE_CACHE=1
                ;;
            d)
                DESTROY=1
                ;;
            l)
                LOG_LEVEL="$OPTARG"
                ;;
            c)
                COMMAND="$OPTARG"
                ;;
            ?)
                usage
                exit
                ;;
         esac
        count=`expr $count + 1`
        if [ "$OPTARG" ]
        then
            count=`expr $count + 1`
        fi
done
shift $count

black="\e[0;30m"
red="\e[0;31m"
green="\e[0;32m"
orange="\e[0;33m"
blue="\e[0;34m"
purple="\e[0;35m"
turquase="\e[0;36m"
NC="\e[0m"

function info ()
{
    printf "$turquase"
    echo "$1"
    printf "$NC"
}

function success ()
{
    printf "$green"
    echo "$1"
    printf "$NC"
}

function warning ()
{
    printf "$orange"
    echo "$1"
    printf "$NC"
}

function error ()
{
    printf "$red"
    echo "$1"
    printf "$NC"
}

env="$(cat '/workspace/env.json')"
function get_json()
{
    echo $1 | sed -e 's/^[{}]*//g' | awk -F=':' -v RS=',' "\$1~/\"$2\"/ {print}" | sed -e "s/\"$2\"://" | tr -d "\n\t" | sed -e 's/\\"/"/g' | sed -e 's/\\\\/\\/g' | sed -e 's/^[ \t]*//g' | sed -e 's/^"//'  -e 's/"$//'
}

function log()
{
    if [ "$LOG_LEVEL" == "1" ]
    then
        echo $1
    fi
}

workspace_version_file="/workspace/.system/workspace-version.txt"
if [ "$IMAGE_TAG" == "" ]
then
    IMAGE_TAG="$(cat $workspace_version_file)"
else
    echo "$IMAGE_TAG" > $workspace_version_file
fi

image_tag_username="crobays"
git_config_file="/workspace/config/git.json"
if [ ! -d /workspace/workspace-image ]
then
    pull_image=1
else
    if [ -f "/workspace/.system/workspace-image-tag-username" ]
    then
        image_tag_username="$(cat /workspace/.system/workspace-image-tag-username)"
    fi

    workspace_base_dir="/workspace/workspace-image"
    if [ "$(cat $git_config_file)" == "$(cat "$workspace_base_dir/config-boilerplate/git.json")" ]
    then
        warning "First set your Git credentials in ./config/git.json"
        exit
    fi
fi

workspace_base_image="$image_tag_username/workspace"
workspace_archive_dir="/workspace/.docker-images"
workspace_image_file="$workspace_archive_dir/$image_tag_username-SLASH-workspace-COLON-$IMAGE_TAG.tar"
NUM="$(printf "%0*d\n" 2 ${1:-1})"
NAME="$BASE_NAME-$NUM"

workspace_status_file="/workspace/.system/workspace-status"
if [ -f "$workspace_status_file" ]
then
    status="$(cat $workspace_status_file)"
    echo "Your workspace image is $status in another process. Please retry when ready."
    exit
fi

if [ ! $BUILD_IMAGE ] && [ "$(docker inspect $workspace_base_image:$IMAGE_TAG 2>/dev/null)" == "[]" ]
then
    if [ -f "$workspace_image_file" ]
    then
        info "Loading $workspace_base_image:$IMAGE_TAG from $workspace_image_file"
        echo "loading" > "$workspace_status_file"
        docker load --input "$workspace_image_file"
        rm "$workspace_status_file"
    else
        pull_image=1
    fi
fi

if [ $BUILD_IMAGE ] || [ "$(docker inspect $workspace_base_image:$IMAGE_TAG 2>/dev/null)" == "[]" ]
then
    if [ $pull_image ]
    then
        echo "pulling" > "$workspace_status_file"
        docker pull "$workspace_base_image:$IMAGE_TAG"
        rm "$workspace_status_file"
    else
        no_cache="--no-cache"
        if [ $USE_CACHE ]
        then
            no_cache="$no_cache=false"
        else
            no_cache="$no_cache=true"
            start_date="$(date)"
        fi
        username="$(get_json "$env" 'username')"
        if [ "$username" != "$image_tag_username" ]
        then
            echo "$username" > /workspace/.system/workspace-image-tag-username
        fi
        echo "building" > "$workspace_status_file"
        docker build \
            --tag "$workspace_base_image:$IMAGE_TAG" \
            $no_cache \
            "$workspace_base_dir"
        rm "$workspace_status_file"
    fi

    if [ "$(docker inspect $workspace_base_image:$IMAGE_TAG 2>/dev/null)" != "[]" ]
    then
        if [ "$start_date" != "" ]
        then
            echo "Started: $start_date"
            echo "Ended:   $(date)"
        fi

        if [ -f "$workspace_image_file" ]
        then
            rm -f "$workspace_image_file"
        fi
        info "Saving $workspace_base_image:$IMAGE_TAG to $workspace_image_file"
        echo "saving" > "$workspace_status_file"

        docker save --output "$workspace_image_file" "$workspace_base_image:$IMAGE_TAG"
        rm "$workspace_status_file"
    else
        error "Building $workspace_base_image:$IMAGE_TAG failed"
        exit
    fi
    RERUN_CONTAINER=1
fi

if [ $DESTROY ]
then
    docker rm -f "$NAME" 2>/dev/null
    exit
fi

git_config_lock_file="/workspace/.system/git.json.lock"
if [ ! $RERUN_CONTAINER ] && [ -f "$git_config_lock_file" ] && [ "$(cat $git_config_lock_file)" != "$(cat $git_config_file)" ]
then
    RERUN_CONTAINER=1
fi

if [ $RERUN_CONTAINER ]
then
    docker rm -f "$NAME" 2>/dev/null
fi

container_state_running="$(docker inspect --format='{{.State.Running}}' "$NAME" 2>/dev/null)"
if [ "$container_state_running" == "" ]
then
    if [ -f /workspace/.system/workspace_rsa ]
    then
        rm /workspace/.system/workspace_rsa
        rm /workspace/.system/workspace_rsa.pub
    fi
    log "docker run"
    docker run \
        --name "$NAME" \
        --hostname "$HOSTNAME-$NAME" \
        --volume "/workspace:/workspace" \
        --volume "/var/run/docker.sock:/var/run/docker.sock" \
        --publish "6${NUM}22:22" \
        --env "CONFIG_DIR=/workspace/config" \
        --env "SYSTEM_DIR=/workspace/.system" \
        --env "LOG_LEVEL=$LOG_LEVEL" \
        --env "DOCKER_NAME=$NAME" \
        --env "TIMEZONE=$(get_json "$env" 'timezone')" \
        --env "USERNAME=$(get_json "$env" 'username')" \
        -d \
        "$workspace_base_image:$IMAGE_TAG"
    echo -n "Configuring $NAME"
    while true
    do
        echo -n "."
        sleep 1
        if [ -f /workspace/.system/workspace_rsa ]
        then
            echo ""
            break
        fi
    done
    docker logs $NAME
    ssh crobays@localhost -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" -q -i /workspace/.system/workspace_rsa -p "6${NUM}22" -C "echo 'first run'" 2>dev/null
else
    workspace -r
    exit
fi

if [ $COMMAND ]
then
    ssh crobays@localhost -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" -q -i /workspace/.system/workspace_rsa -p "6${NUM}22" -C "$COMMAND"
else
    ssh crobays@localhost -o "StrictHostKeyChecking no" -o "UserKnownHostsFile=/dev/null" -q -i /workspace/.system/workspace_rsa -p "6${NUM}22"
fi