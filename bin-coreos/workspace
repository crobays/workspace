#!/bin/bash
usage()
{
cat << EOF

usage: $(basename $0) options WORKSPACE-NUM

This script handles your Workspace instances with Docker (docker.com)

OPTIONS:
    -h (help)           Show this message
    -t (tag)            The base version of the base (default to \'latest\')
    -r (recreate)       Recreate workspace
    -R (rebuild)        Rebuild workspace image from Dockerfile and create workspace container
    -c (cache)          Use cache when building base image
    -d (destroy)        Kill and destroy workspace container

EOF
}
BASE_NAME="workspace"
count=0
while getopts “ht:rRBcd” OPTION
do
         case $OPTION in
                 h)
                         usage
                         exit 1
                         ;;
                 t)
                         IMAGE_TAG="$OPTARG"
                         ;;
                 r)
                         RERUN_CONTAINER=1
                         ;;
                 R)
                         REBUILD_IMAGE=1
                         ;;
                 c)
                         USE_CACHE=1
                         ;;
                 d)
                         DESTROY=1
                         ;;
                 ?)
                         usage
                         exit
                         ;;
         esac
        count=`expr $count + 1`
        if [ "$OPTARG" ]
        then
            count=`expr $count + 1`
        fi
done
shift $count

black="\e[0;30m"
red="\e[0;31m"
green="\e[0;32m"
orange="\e[0;33m"
blue="\e[0;34m"
purple="\e[0;35m"
turquase="\e[0;36m"
NC="\e[0m"

function info ()
{
    printf "$turquase"
    echo "$1"
    printf "$NC"
}

function success ()
{
    printf "$green"
    echo "$1"
    printf "$NC"
}

function warning ()
{
    printf "$orange"
    echo "$1"
    printf "$NC"
}

function error ()
{
    printf "$red"
    echo "$1"
    printf "$NC"
}

env="$(cat '/workspace/env.json')"
function get_env()
{
    echo $env | sed -e 's/[{}]/''/g' | awk -F=':' -v RS=',' "\$1~/\"$1\"/ {print}" | sed -e "s/\"$1\"://" | tr -d "\n\t\" "
}

if [ "$IMAGE_TAG" == "" ]
then
    IMAGE_TAG="latest"
fi
username="$(get_env 'username')"
workspace_base_dir="/workspace"
workspace_base_image="$username/workspace:$IMAGE_TAG"
workspace_base_image_file="/workspace/.docker-images/$username-SLASH-workspace-COLON-$IMAGE_TAG.tar"

if [ "$(cat /workspace/config/git.json)" == "$(cat /workspace/.config-boilerplate/git.json)" ]
then
    warning "First set your Git credentials in ./config/git.json"
    exit
fi

NAME_SUFFIX="$1"
if [ ! "$NAME_SUFFIX" ]
then
    NAME_SUFFIX=1
fi

NAME="$BASE_NAME-$(printf "%0*d\n" 2 ${NAME_SUFFIX:-1})"

if [ ! $REBUILD_IMAGE ] && [ "$(docker inspect $workspace_base_image 2>/dev/null)" == "[]" ] && [ -f "$workspace_base_image_file" ]
then
    info "Loading $workspace_base_image from $workspace_base_image_file"
    docker load --input "$workspace_base_image_file"
fi

if [ $REBUILD_IMAGE ] || [ "$(docker inspect $workspace_base_image 2>/dev/null)" == "[]" ]
then
    # remove exited images from the old instance
    docker rm $(docker ps -aq)

    cache="--no-cache"
    if [ $USE_CACHE ]
    then
        cache="$cache=false"
    fi
    docker build --tag $workspace_base_image $cache "$workspace_base_dir"
    if [ "$(docker inspect $workspace_base_image 2>/dev/null)" != "[]" ]
    then
        if [ "$IMAGE_TAG" != "latest" ]
        then
            docker tag $workspace_base_image ${workspace_base_image/$IMAGE_TAG/latest}
        fi
        if [ -f "$workspace_base_image_file" ]
        then
            rm -f "$workspace_base_image_file"
        fi
        info "Saving $workspace_base_image to $workspace_base_image_file"
        docker save --output "$workspace_base_image_file" $workspace_base_image
    else
        error "Sorry to say... but building $workspace_base_image failed"
        exit
    fi

    RERUN_CONTAINER=1
fi

if [ $DESTROY ]
then
    docker rm -f "$NAME" 2>/dev/null
    exit
fi

if [ $RERUN_CONTAINER ]
then
    docker rm -f "$NAME" 2>/dev/null
fi

container_state_running="$(docker inspect --format='{{.State.Running}}' "$NAME" 2>/dev/null)"

if [ "$container_state_running" == "" ]
then
    echo 'docker run'
    docker run \
        --name "$NAME" \
        --hostname "$HOSTNAME-$NAME" \
        --volume "/workspace:/workspace" \
        --volume "/var/run/docker.sock:/var/run/docker.sock" \
        --env "CONFIG_DIR=/workspace/config" \
        --env "LOG_LEVEL=1" \
        --env "TIMEZONE=$(get_env 'timezone')" \
        --env "USERNAME=$username" \
        --interactive \
        --detach \
        "$workspace_base_image"
elif [ "$container_state_running" == "false" ]
then
    echo 'docker start'
    docker start \
        --interactive \
        "$NAME"
fi

docker exec \
        --interactive \
        --tty \
        "$NAME" \
        "$(docker inspect --format='{{(index .Config.Entrypoint 0)}}' "$NAME")"

